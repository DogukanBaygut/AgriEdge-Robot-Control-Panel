# -*- coding: utf-8 -*-
##
# @file home_page_driver.py
# @brief Main application logic for the agricultural assistant UI.
# @author Sinan ILBEY, Doƒüukan AVCI
# @date 2025-05-04
#
# @details
# This module defines the `TakvimPencere` class, which loads a PyQt5-based graphical interface
# designed for agricultural monitoring and advisory. It integrates:
# - Weather updates using the Open-Meteo API,
# - Image-based field condition analysis (moisture, light, temperature),
# - Reminder and calendar functions for agricultural tasks.
#
# The GUI layout is defined in a separate file (`home_page.py`) generated from Qt Designer UI.
# This script handles logic, event connections, and user interactions.

import sys
import os
from PyQt5 import QtWidgets, QtGui, QtCore
from home_page import Ui_MainWindow  # Auto-generated from .ui file
from hava_durumu import WeatherFetcher
from Analizci import RGBMapAnalyzer
from style_sheets import CENTRALWIDGET_STYLE, CALENDAR_WIDGET_STYLE

##
# @class TakvimPencere
# @brief Main window class that manages GUI logic and data interaction.
#
# This class connects UI elements to Python backend logic, such as handling user events,
# loading weather information, processing map images, and managing a task reminder system.
#

# -*- coding: utf-8 -*-
##
# @file main.py
# @brief Main application logic for the agricultural assistant GUI.
# @author Doƒüukan Baygut
# @date 2025-05-04
#
# @details
# This module defines the TakvimPencere class that connects the GUI generated from Qt Designer
# to Python backend logic. The application includes functionalities for:
# - Weather updates (via Open-Meteo API),
# - Field map analysis (moisture, light, temperature),
# - Reminder system with calendar integration.
#
# The UI is separated in home_page.py (auto-generated from .ui file).

import sys
import os
from PyQt5 import QtWidgets, QtGui, QtCore
from home_page import Ui_MainWindow  # UI generated by Qt Designer
from hava_durumu import WeatherFetcher  # Weather update function
from Analizci import RGBMapAnalyzer  # Image-based analysis function

##
# @class AgriAssistant
# @brief Main window class that connects PyQt UI with system logic.
#
# @details
# Handles weather display, image analysis, calendar-based reminders,
# and dynamic GUI updates. Serves as the controller in MVC-like architecture.
#
# @inherits QMainWindow
# @ui home_page.Ui_MainWindow
# @uses guncelle_hava_durumu, analiz_yap


class AgriAssistant(QtWidgets.QMainWindow):
    ##
    # @brief Constructor that initializes the GUI window and sets all bindings.
    def __init__(self):
        """
        @brief Initializes the TakvimPencere main window and all bindings.
        @param parent (optional): The parent widget (usually None for main windows).
        """

        super().__init__()  # Initialize the parent QMainWindow

        self.ui = Ui_MainWindow()  # Instantiate the UI class generated from Qt Designer
        self.ui.setupUi(self)      # Apply the UI layout to this window instance

        # Set a soft blue background color for the central widget
        self.setStyleSheet(CENTRALWIDGET_STYLE)

        # Apply light green styling to the calendar widget for a visually calm UI
        self.ui.widget_calendar.setStyleSheet(CALENDAR_WIDGET_STYLE)

        # Fetch and display the current weather forecast upon startup
        WeatherFetcher(self.ui.textBrowser_Hava_durumu).render()

        # === Initialize image placeholders for each tab (moisture, light, temperature) ===
        self.label_nem = QtWidgets.QLabel()         # QLabel for the moisture map
        self.label_isik = QtWidgets.QLabel()        # QLabel for the light intensity map
        self.label_sicaklik = QtWidgets.QLabel()    # QLabel for the temperature map

        # === Apply shared settings to all image labels ===
        for label in [self.label_nem, self.label_isik, self.label_sicaklik]:
            label.setScaledContents(True)               # Ensure image scales to fit label
            label.setAlignment(QtCore.Qt.AlignCenter)   # Center-align the image
            label.setMinimumHeight(300)                 # Set minimum height for visibility

        # === Add these labels to the appropriate tabs ===
        layout_nem = QtWidgets.QVBoxLayout(self.ui.NEM_MAP)
        layout_nem.addWidget(self.label_nem)

        layout_isik = QtWidgets.QVBoxLayout(self.ui.LIGHT_MAP)
        layout_isik.addWidget(self.label_isik)

        layout_sicaklik = QtWidgets.QVBoxLayout(self.ui.TEMPRATURE)
        layout_sicaklik.addWidget(self.label_sicaklik)

        # === Load map images from a fixed directory ===
        base_path = "C:/Users/doguk/OneDrive/Masa√ºst√º/bitirme_arayuz/"  # Path to image directory
        resimler = {
            self.label_nem: "nem_haritasi.png",
            self.label_isik: "isik_miktari.png",
            self.label_sicaklik: "sicaklik_miktari.png"
        }

        # Try to load each image into its QLabel, otherwise show error message
        for label, dosya in resimler.items():
            tam_yol = base_path + dosya
            if os.path.exists(tam_yol):
                pixmap = QtGui.QPixmap(tam_yol)
                label.setPixmap(pixmap)  # Set the image on the label
            else:
                label.setText(f"‚ùå File not found:\n{tam_yol}")  # Display error text

        # === Initialize the reminder list and connect buttons to their handlers ===
        self.kayitlar = []  # Holds (QDate, text) reminder tuples

        # Save and delete buttons for calendar reminders
        self.ui.pushButton_CALENDAR_KAYDET.clicked.connect(self.kaydet_not)
        self.ui.pushButton_CALENDAR_SIL.clicked.connect(self.sil_secilen_kayit)

        # Weather update button: refreshes data and updates the status bar
        # yeni
        self.ui.pushButton_guncelle_havadurumu.clicked.connect(
            lambda: (
                WeatherFetcher(self.ui.textBrowser_Hava_durumu).render(),
                self.ui.statusbar.showMessage("‚òÄÔ∏è Weather updated.")
            )
        )

        # Connect the temperature tab's analysis button to its logic
        self.ui.pushButton_analiz_scaklki.clicked.connect(self.analiz_et)

        # === Create a timer that updates the reminder list every 10 seconds ===
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.guncelle_kayitlar)
        self.timer.start(10000)

        # === Optional extra viewer for future map visualizations (placeholder) ===
        self.label_map_viewer = QtWidgets.QLabel()
        layout = QtWidgets.QVBoxLayout(self.ui.NEM_MAP)
        layout.addWidget(self.label_map_viewer)

        # === On startup, check if there's a reminder for today's date ===
        self.kontrol_et_bugunku_not()
        
    ##
    # @brief Saves a new calendar reminder entry if it's not a duplicate.
    #
    # This function checks whether the user selected a valid task from the dropdown
    # and whether that task already exists for the selected calendar date. If not,
    # it appends the task to the internal list and updates the UI accordingly.
    #
    # @details
    # - Shows a warning if a duplicate entry is detected.
    # - Displays an information popup if the added entry is for today's date.
    def kaydet_not(self):
        # Get the selected date from the calendar widget
        tarih = self.ui.calendar.selectedDate()

        # Get the selected reminder type from the combo box and remove whitespace
        islem = self.ui.comboBox_Notlarm.currentText().strip()

        # Do nothing if the task text is empty
        if not islem:
            return

        # Format the reminder text (e.g., "04.05.2025 Sulama")
        yazi = f"{tarih.toString('dd.MM.yyyy')} {islem}"

        # üîí Prevent saving the same task for the same date more than once
        for t, y in self.kayitlar:
            if t == tarih and islem in y:
                QtWidgets.QMessageBox.warning(
                    self,
                    "Uyarƒ±",
                    f"‚ö†Ô∏è Bu tarih ve i≈ülem zaten kaydedilmi≈ü:\n‚Üí {yazi}"
                )
                return  # Exit early without saving

        # ‚úîÔ∏è Add the new reminder to the internal list
        self.kayitlar.append((tarih, yazi))
        print("Kayƒ±t eklendi:", yazi)  # Log to terminal (optional)
        self.guncelle_kayitlar()       # Refresh the list display
        self.ui.statusbar.showMessage(f"‚úÖ Not eklendi: {yazi}")

        # üîî If the reminder is for today's date, show a popup notification
        if tarih == QtCore.QDate.currentDate():
            QtWidgets.QMessageBox.information(
                self,
                "üìÖ Bug√ºnk√º Hatƒ±rlatma",
                f"‚úÖ Bug√ºn i√ßin bir hatƒ±rlatma eklendi:\n‚Üí {islem}"
            )

    ##
    # @brief Checks if there is a saved reminder for today's date and notifies the user.
    #
    # This method iterates through the stored reminder list (`self.kayitlar`)
    # and compares each saved date to the current system date. If a match is found,
    # it extracts the task text and shows an informational message box to the user.
    #
    # @details
    # Only the first matching entry is shown (using `break` after detection).
    def kontrol_et_bugunku_not(self):
        # Get today's date using Qt's date object
        bugun = QtCore.QDate.currentDate()

        # Iterate through all saved reminders
        for tarih, yazi in self.kayitlar:
            if tarih == bugun:
                # Extract only the task name (e.g., "Sulama") from the reminder string
                icerik = yazi.split(" ", 1)[-1]

                # Show notification popup to inform the user about the reminder
                QtWidgets.QMessageBox.information(
                    self,
                    "üìÖ Bug√ºnk√º Hatƒ±rlatma",
                    f"‚úÖ Bug√ºn i√ßin bir hatƒ±rlatma var:\n‚Üí {icerik}"
                )
                break  # Exit after the first matching reminder is found

        ##
    # @brief Updates the visible reminder list by filtering out past entries.
    #
    # This function clears the reminder display widget and repopulates it with only
    # current and future reminders. It also updates the internal `self.kayitlar` list
    # to exclude any expired (past-date) entries.
    #
    # @details
    # - Entries are compared against today's date.
    # - Old reminders (before today) are permanently removed from memory.
    def guncelle_kayitlar(self):
        # Get today's date
        bugun = QtCore.QDate.currentDate()

        # Clear the list widget in the UI to prepare for fresh data
        self.ui.listWidget_hatrlatma_notlarm.clear()

        # Temporary list to store only valid (current or future) reminders
        gecerli = []

        # Iterate over all stored reminders
        for tarih, yazi in self.kayitlar:
            if tarih >= bugun:
                # Show reminder text in the list widget if it's today or later
                self.ui.listWidget_hatrlatma_notlarm.addItem(yazi)
                # Keep this entry for further use
                gecerli.append((tarih, yazi))

        # Update the internal list with only valid reminders
        self.kayitlar = gecerli

        ##
    # @brief Deletes the selected reminder from both the UI and internal memory.
    #
    # This method checks if a reminder is selected in the list widget. If so,
    # it removes the corresponding entry from the internal `self.kayitlar` list
    # and refreshes the reminder view. If nothing is selected, it logs a warning.
    #
    # @details
    # - Deletion affects both visual list and internal data.
    # - A status message is shown after deletion.
    def sil_secilen_kayit(self):
        # Get the index of the currently selected row in the list widget
        secili_index = self.ui.listWidget_hatrlatma_notlarm.currentRow()

        # Proceed only if a valid selection is made
        if secili_index >= 0:
            # Log the reminder being removed
            print("Silinen kayƒ±t:", self.kayitlar[secili_index][1])

            # Remove the entry from internal list by index
            self.kayitlar.pop(secili_index)

            # Update the status bar with a confirmation
            self.ui.statusbar.showMessage("üóëÔ∏è Not silindi.")

            # Refresh the reminder list shown in the UI
            self.guncelle_kayitlar()
        else:
            # No selection was made; print a warning
            print("‚ö†Ô∏è Hi√ßbir not se√ßilmedi!")

        ##
    # @brief Performs analysis on the currently selected field map and displays results.
    #
    # This method determines which tab (moisture, light, or temperature) is active,
    # selects the corresponding image file, and calls the `analiz_yap` function
    # to perform region-based color analysis. It also extracts current weather info
    # and appends climate-based recommendations accordingly.
    #
    # @details
    # - Visual feedback is shown in the QTextBrowser.
    # - Warnings are customized based on interpreted weather forecast symbols.
    
    def analiz_et(self):
        index = self.ui.tabWidget_farmermap.currentIndex()
        harita_tipi = ["nem", "isik", "sicaklik"][index]
    
        resim_yollari = {
            "nem": "C:/Users/doguk/OneDrive/Masa√ºst√º/bitirme_arayuz/nem_haritasi.png",
            "isik": "C:/Users/doguk/OneDrive/Masa√ºst√º/bitirme_arayuz/isik_miktari.png",
            "sicaklik": "C:/Users/doguk/OneDrive/Masa√ºst√º/bitirme_arayuz/sicaklik_miktari.png"
        }
    
        # üéØ Yeni: RGBMapAnalyzer sƒ±nƒ±fƒ± kullanƒ±lƒ±yor
        analyzer = RGBMapAnalyzer(resim_yollari[harita_tipi], harita_tipi)
        sonuc = analyzer.to_html()
    
        # Hava durumu √∂nerileri ile entegre et
        try:
            html = self.ui.textBrowser_Hava_durumu.toHtml()
            if "Saƒüanak" in html or "‚õàÔ∏è" in html:
                sonuc += "\n\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚òî Bug√ºn saƒüanak yaƒüƒ±≈ü bekleniyor, sulama yapma."
            elif "Yaƒümur" in html or "üåßÔ∏è" in html:
                sonuc += "\n\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èüåßÔ∏è Bug√ºn yaƒümur var, a≈üƒ±rƒ± sulamadan ka√ßƒ±nƒ±lmalƒ±."
            elif "G√ºne≈üli" in html or "‚òÄÔ∏è" in html:
                sonuc += "\n\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚òÄÔ∏è Bug√ºn g√ºne≈üli, g√∂lgeleme √∂nerilir."
            elif "Par√ßalƒ±" in html or "üå§Ô∏è" in html:
                sonuc += "\n\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èüå§Ô∏è Bug√ºn par√ßalƒ± bulutlu, ƒ±≈üƒ±k seviyesi dengeli olabilir."
        except Exception as e:
            sonuc += f"\n‚ö†Ô∏è Hava durumu verisi yorumlanamadƒ±: {e}"

        # HTML sonucu g√∂r√ºnt√ºle
        self.ui.textBrowser_Analiz_sonucu.setText(sonuc)
        self.ui.statusbar.showMessage(f"üìä {harita_tipi.upper()} analizi tamamlandƒ±.")


##
# @brief Entry point of the application.
#
# This block initializes the Qt application environment, creates the main window
# (`TakvimPencere`), shows it to the user, and starts the event loop.
#
# @details
# - `QApplication` handles the event loop for all Qt widgets.
# - `TakvimPencere` is the main window class integrating the GUI and logic.
# - `sys.exit(app.exec_())` ensures clean shutdown when the window is closed.
if __name__ == "__main__":

    # Create the main application object (required for any Qt app)
    app = QtWidgets.QApplication(sys.argv)

    # Instantiate the main window that contains all GUI functionality
    pencere = AgriAssistant()

    # Show the window on the screen
    pencere.show()

    # Start the Qt event loop and exit cleanly when the window is closed
    sys.exit(app.exec_())
